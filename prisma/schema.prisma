// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Guest {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Basic guest information
  firstName    String
  lastName     String
  email        String?
  phone        String?
  address      String?

  // Wedding-specific fields
  rsvpStatus   RsvpStatus @default(PENDING)
  dietaryRestrictions String?
  plusOne      Boolean    @default(false)
  notes        String?

  // Table assignment
  tableId      String?
  table        Table?     @relation(fields: [tableId], references: [id])

  // Relationships with other guests
  relationshipsFrom Relationship[] @relation("GuestFrom")
  relationshipsTo   Relationship[] @relation("GuestTo")

  // Photo assignments (many-to-many)
  photoAssignments PhotoAssignment[]

  @@map("guests")
}

model Relationship {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  
  // The two guests in the relationship
  guestFromId String
  guestToId   String
  guestFrom   Guest  @relation("GuestFrom", fields: [guestFromId], references: [id], onDelete: Cascade)
  guestTo     Guest  @relation("GuestTo", fields: [guestToId], references: [id], onDelete: Cascade)
  
  // Relationship details
  relationshipType RelationshipType
  strength         Int              @default(1) // 1-5 scale for visualization
  notes            String?
  
  @@unique([guestFromId, guestToId])
  @@map("relationships")
}

model Table {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  capacity    Int      @default(8)
  description String?

  // Guests assigned to this table
  guests Guest[]

  @@map("tables")
}

model Photo {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // File information
  fileName     String   @unique
  originalName String
  filePath     String
  fileSize     Int?
  mimeType     String?

  // Photo metadata
  width        Int?
  height       Int?
  description  String?

  // Guest assignments (many-to-many)
  guestAssignments PhotoAssignment[]

  @@map("photos")
}

model PhotoAssignment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Relationships
  guestId   String
  photoId   String
  guest     Guest    @relation(fields: [guestId], references: [id], onDelete: Cascade)
  photo     Photo    @relation(fields: [photoId], references: [id], onDelete: Cascade)

  // Additional metadata
  notes     String?

  @@unique([guestId, photoId])
  @@map("photo_assignments")
}

enum RsvpStatus {
  PENDING
  ACCEPTED
  DECLINED
  MAYBE
}

enum RelationshipType {
  FAMILY
  FRIEND
  COLLEAGUE
  PARTNER
  SPOUSE
  SIBLING
  PARENT
  CHILD
  COUSIN
  ACQUAINTANCE
}
